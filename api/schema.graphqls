#schema {
#    query: Query
#    mutation: Mutation
#}
#
#type Query {
#
#}
#
#type Mutation {
#
#}

scalar DateTime

enum UnitType {
    UNIT
    LIST
    TODO
    TEXT_PLAIN
    TEXT_MARKDOWN
    TEXT_CODE
}

interface IUnit {
    id: ID!
    title: String!
    type: UnitType!
    created: DateTime!
    updated: DateTime!
}

type Unit implements IUnit{
    id: ID!
    title: String!
    type: UnitType!
    created: DateTime!
    updated: DateTime!
}

type UnitTextPlain implements IUnit {
    id: ID!
    title: String!
    type: UnitType!
    created: DateTime!
    updated: DateTime!
    data: String!
}

type UnitTextMarkdown implements IUnit{
    id: ID!
    title: String!
    type: UnitType!
    created: DateTime!
    updated: DateTime!
    data: String!
}

type UnitTextCode implements IUnit{
    id: ID!
    title: String!
    type: UnitType!
    created: DateTime!
    updated: DateTime!
    data: String!
    language: String!
}

type UnitTodoItem {
    data: String!
    done: Boolean!
}

type UnitTodo implements IUnit{
    id: ID!
    title: String!
    type: UnitType!
    created: DateTime!
    updated: DateTime!
    items: [UnitTodoItem!]!
}

type UnitList implements IUnit{
    id: ID!
    title: String!
    type: UnitType!
    created: DateTime!
    updated: DateTime!
    items: [Unit!]!
}

interface IStorage {

}

type StorageDir implements IStorage {
    path: String!
}

type Memory {
    name: String!
    root: IUnit!
    storage: IStorage!
}

interface Memories {
    items: [Memory!]!
}

type MemoriesFile implements Memories {
    path: String!
    items: [Memory!]!
}
